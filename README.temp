# \<ods-[name]>

[![Build status](https://itsals.visualstudio.com/Orion%20Design%20System/_apis/build/status/ods-button)](https://itsals.visualstudio.com/Orion%20Design%20System/_build/latest?definitionId=3214)

Orion Design System [name] element, [statement ...].

\<ods-[element]> is a [summery ...].

## Install

```
$ npm i @alaskaairux/ods-[name]
```

### Step by step Orion dependency instructions

To build an app from the ground up using the Orion Design system and all it's individual resources, see this [step by step](https://github.com/AlaskaAirlines/OrionStatelessComponents__boilerplate/blob/master/examples/create-react-app-example.md) build example doc.

### Design Token CSS Custom Property dependency

The use of any ODS Component has a dependency on the [ODS Design Tokens](https://www.npmjs.com/package/@alaskaairux/orion-design-tokens). See repository and API information [here](https://github.com/AlaskaAirlines/OrionDesignTokens).

Orion Web Components have a dependency specifically on the generation of **CSS Custom Properties** from the Orion Design Tokens package. Consider the following example config for Design Token generation. 

```
{
  "source": [ "./node_modules/@alaskaairux/orion-design-tokens/**/*.json" ],
  "platforms": {
    "scss": {
      "transformGroup": "scss",
      "buildPath": "./src/sass/",
      "files": [
        {
          "destination": "_TokenVariables.scss",
          "format": "scss/variables"
        }
      ]
    },
    "css": {
      "transformGroup": "scss",
      "buildPath": "./src/sass/",
      "files": [
        {
          "destination": "_TokenProperties.scss",
          "format": "css/variables"
        }
      ]
    }
  }
}
```

In the project's primary Sass output file, consider the following imports example:

```
@import "./tokenVariables";
@import "./tokenProperties";
```

CSS Custom Properties should be fully printed out into the global stylesheet of the project. 

### CSS Custom Property fallbacks

In older browsers where CSS Custom Properties are not supported, fallback properties are pre-generated and included with the npm. Any update to the Orion Design Tokens will be immediately reflected with supporting browsers. Legacy browsers will need updated components with pre-generated fallback properties. 

### Define dependency in project component 

Define the component dependency within each component that is using the \<ods-[name]> component.

**Define component dependency**

```
import "@alaskaairux/ods-[name]/ods-[name]";
```

**Reference component in HTML**

```
<ods-[name] string="hello world" />

## Element \<ods-[name]>

```
class Ods[Name] extends LitElement
```

### Styling:

Notes if required

###[name] use cases

The \<ods-[name]> element should be used in situations where users may:

* list item
* list item

### Responsive state:

The \<ods-[name]> element will respond [statement ...]

### Properties:

| Attribute | value type | Description |
|----|----|----|
| string | string | Value entered as string will be displayed as string value within the button element |


### API Code Examples

Default [name]

```
<ods-[name] string="hello world"></ods-[name]>
```

## Install instructions

[statement ...]

**Define component dependency**

```
import "@alaskaair/ods-[name]/ods-[name]";
```

**Reference component in HTML**

```
<ods-[name] string="hello world" />
```

### CSS, Custom Properties and fallbacks

ODS Web Components use CSS Custom Properties to define core UI properties of each element or component. Where CSS Custom Properties are not supported, fallback properties are generated.

When installing a ODS Web Component, all CSS needed for the component is included with the npm package. No additional builds or processing is needed at the project level.
